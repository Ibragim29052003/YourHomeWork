## 2 важных файла:

  * файл README.md - это визитная карточка репозитории.
  * .gitignore файл - это файл, в рамках которого прописываются расширения, названия файлов и папок, которые CVS должен игнорировать.

## Важные команды из всего семинара:

git clone link_repository - команда, позволяющая копировать репозиторию со всеми файлами.

cd - команда для перехода в нужную папку.

git branch -M main - команда, определяющая название базовой ветки для удаленной репозитории.

git remote add origin link_repository - команда для привязки локальной репозитории к удаленной репозитории.

git push -u origin main - команда отправляет текущее состояние файлов из локальной репозитории в удаленный репозиторий .

Инстркуция по работе с Git

## Команды первого семинара
Команды, которые разобрали на первом семинаре:
1. *git init* - инициализирует в папке систему контроля версий.
2. *git status* - позволяет проверить текущий статус работы с файлами (какие файлы не отслеживаются, какие нужно закоммитить и т.д).
3. *git add* __Имя файла__ - добавить изменения данного файла.
4. *git commit* -m "__Комментарий__" - отправляем наши изменения в репозиторий, __В комментарии обязательно указать, что за изменения были сделаны__ 
4. *git log* - показывает журнал изменений, в области видимости текущей ветки, из которой вызвали эту команду.
5. *git checkout* __либо первые 4 символа хеша коммита, либо название ветки__ - позволяет перемещаться по репозиторию, если мы введем 4 символа хеша коммита то переместимся, к тому коммиту, если введем название ветки то переместимся на другую ветку.
6. *git diff* - показывает разницу между версиями файлов, что было изменено.

## Команды второго семинара
Команды, которые разобрали на втором семинаре:
1. *git branch* - показывает все активные ветки.
2. *git branch* __имя новой ветки__ - команда создает новую ветку под именем, которым указали.
3. *git checkout* __название ветки__ - перейти на ветку с именем, которым указали.
4. *git merge* __название ветки__ - сливаем ветку под именем, которым мы указали, в ветку в которой мы сейчас находимся. 
4. *git branch -d* __название ветки__ - удаляем ветку с именем, которым указали.
5. *git log --graph* - показывает историю коммитов с небольшим графическим дополнением, как делились ветки и какие коммиты были сделаны в отдельных ветках.

### Примечание ко второму семинару
**В репозиторий git не добавляют тяжелые файлы!** такие, как музыка, фото и т.д.
Для того, чтобы игнорировать такие файлы создают файл с именем "_.gitignore_".
Внутри этого файла прописывают имена файлов, которые нужно игнорировать для отслеживания и сохранения в репозитории. 

## Команды терьего семинара
### Примечание
В этом семинаре мы работали с удаленными репозиториям, для этого мы использовали "GitHub"
1. *git clone* __Url удаленного репозитория с GitHub__- копирует из GitHub удаленный репозиторий на компьютер и дальнейшая работа будет с локальным/скопированным репозиторием __обратите внимание, что репозиторий копируется папкой и нужно будет в терминале прейти в эту папку__.
2. *git remote add* __Имя__ __Url__ - команда создает подключение к удаленному репозиторию, который находиться по Url'у, который мы указали, и называем подключение именем, которое мы ввели (в случае GitHub - это origin).
3. *git branch -M* __Имя__ - переименовывает ветку в соответствии с именем, которое указали.
4. *git push* - команда, которая отправляет коммиты на удаленный репозиторий. 
5. *git push -u origin main* - команда, которая отправляет ветку master в на удаленную ветку origin. 
6. *git pull* - вытягивает все изменения (если они есть) с удаленного репозитория на локальный.

### P.s
Разобрали, как создавать в GitHub удаленные репозитории, как делать Fork и pullrequest.